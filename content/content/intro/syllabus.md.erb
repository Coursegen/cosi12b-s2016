---
title: Syllabus for Cosi 12b
---
<% tbh = TableHelper.new(:normal) %>
<% tbh.headers("", "") %>
<% tbh.row("Instructor", "Pito Salas") %>
<% tbh.row("Class Times", "Monday, Wednesday and Thursday, 12:00 to 12:50pm") %>
<% tbh.row("Location", "TBD") %>
<% tbh.row("Office Hours", "1 hour before class") %>
<% tbh.row("Prerequisites", "Cosi 11a") %>
<% tbh.row("Homework", "Weekly reading and programming assignments. Success in this 4 credit hour course is based on the expectation that students will spend a minimum of 9 hours of study time per week in preparation for class") %>
<% tbh.row("Grading", "0-100 based. See below.") %>
<% tbh.row("Email contact: ", "pitosalas@brandeis.edu") %>
<% tbh.row("Office", "Feldberg 131") %>
<%= tbh.render %>

#### Introduction

<%= callout("", "Knowing how to program is a poweful thing. Nowadays software has an important role in just about any discipline, from Physics to Robotics, from Medicine to Computer Science.")%>

<%= callout("", "For me, learning to program is learning a new medium. Like writing or mathematics, programming is a creative, rewarding and powerful tool that is also amazingly fun! I believe that deeply and I hope to have you discover that for yourself.") %>

In this course we continue developing your programming fundmanetals, building on what you learned in Cosi 11a. Specifically we will be doing these three things:

1. Go further in understanding basic programming concepts and abstractions like object oriented programming, error and exception management, class libraries and more
1. Get a lot of practice programming and designing programs built up of multiple classes. Decomposing a problem statement and breaking it into steps that can be programmed. Understanding what of all the capabilities available can be used to solve the problem.
1. Begin seeing "Software Development" as something beyond programming, encompassing design, development tools, libraries, debugging and testing and other processes.

Upon completion of this class, students will be able to understand the concept of object-oriented programming (OOP) as well as the purpose and usage of inheritance, polymorphism, encapsulation and method overloading. They will be able to create Java application programs using sound OOP practices (e.g., interfaces and APIs) and proper program structuring.  Finally, they will be able to develop programs using the Java Collection API as well as the Java standard class library.

#### Learning Objectives

The objective of the course is to:
* Cover issues related to the definition, creation and usage of classes, objects and methods.
* Discuss the principles of inheritance and polymorphism and demonstrate through problem analysis assignments how they relate to the design of methods, abstract classes and interfaces.
* Provide the foundation of good programming skills by discussing key issues in the design of object-oriented software, including programming design patterns and programming testing.
* Cover the basics of creating APIs as well as allow students to explore the Java Abstract Programming Interface (API) and Java Collection Framework through programming assignments.

#### Textbook

* Building Java Programs - A Back to Basics Approach (3rd Edition) by Stuart Reges and Marty Stepp, Addison Wesley. We will not follow the book page by page but it makes a useful supplement to the lecture presentations. It contains practice problems and online videos you can use to study for your exams.

#### Software
The recommended software for the course is the Java Development Kit (JDK) and the Eclipse editor.

#### Grading
The final grades for the course will be determined using the following weights:

##### Homework: 35%
* Programming Assignments (roughly every week).
* Programs will be graded on “external correctness” (behavior) and “internal correctness” (style and design).
* Each student receives 5 "late days" for use on homework assignments. A late day allows you to submit a program up to 24 hours late without penalty. For example, you could use 2 late days and submit a program due Thursday 11pm on Saturday by 11pm with no penalty. Once a student has used up all the late days, each successive day that an assignment is late will result in a loss of 5% points on that assignment if submission is 1 day after the deadline and 10% points for every additional day. Regardless of how many late days you have, you may not submit a program more than 3 days after it is due.

##### Exams: 55%
* Three exams: February 9, March 23, and April 27. Exams are scheduled during the recitation time.
* Make-up exams will not be given except in the case of a serious emergency.

##### Participation: 10%

#### Class Rules

* No eating in class

#### Academic Honesty

As stated in the Rights and Responsibilities handbook, "Every member of the University community is expected to maintain the highest standards of academic honesty. A student shall not receive credit for work that is not the product of the student's own effort."

Programming assignments must be completed individually (unless specified otherwise by the instructor); all code you submit must be your own work. You may discuss general ideas of how to approach an assignment, but never specific details about the code to write. Any help you receive from or provide to classmates should be limited and should never involve details of how to code a solution.

As a student of this course you are agreeing to the following rules:

* You may not work as a partner with another student on an assignment.
* You may not get code from online sources.
* You may not show another student your solution to an assignment, nor look at his/her solution, for any reason.
* You may not have another person "walk you through" an assignment, describe in detail how to solve it, or sit with you as you write it. You also may not provide such help to another student. This includes current or former students, tutors, friends, TAs, web site forums, or anyone else.
* You may not post your homework solution code online or ask others for online help. This includes public message boards, forums, file sharing sites and services, or any other online system.
* Under our policy, a student who gives inappropriate help is equally guilty with one who receives it. Instead of providing such help to someone who does not understand an assignment, point him or her to other class resources such as lecture examples, the textbook, or emailing a TA or instructor.
* You must not share your solution and ideas with others. You must also ensure that your work is not copied by others, such as making sure to log out of shared computers, not leaving printouts of your code in public places, and not emailing your code to other students or posting it on the web. We enforce this policy by running similarity detection software over all submitted student programs.
