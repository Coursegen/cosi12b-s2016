---
title: Parts of a program
---
#### Intro
* All languages have a particular way write a program
* **Very particular!**
* A really simple program fits within a single file
* Almost all real programs take more than one file
* Each file is a building block, a component
* YOU the programmer decides what the job is of each file

#### Kinds of errors you will write
* Types
  * Syntax errors - error message from the "compiler", before it even runs
  * Logic errors - the program doesn't do what you expect
  * Crashes or exceptions - the program doesn't get anywhere
* Work on recognizing what kind of error you have
* **Take a 1/2 second to read the error message!!!**

#### "Hello World!"
<%= code_begin %>
public class Hello {
  public static void main(String[] args){
    System.out.println(“Hello World.”);
	}
}
<%= code_end %>
#### Facts about java programs
* Yes, this is a valid Java program
* But to run it you have to put it into a text file
* File is called the same as the class, hello.java
* Java"source code"
  * Usually spaces don't matter
  * Usually extra lines don't matter
  * Everything is case sensitive. All these are different!
    * int myRecord;
    * int Myrecord;
    * int myrecord;
    * Int myrecord; **wrong!!**

#### Template for a Java program

<%= code_begin %>
public class <name> {
  public void method1(<arguments>) {
    <statement>;
    <statement>;
    ...
    <statement>;
  }
  public void method2(<args>) {
    <statement>;
    ...
  }
  ...
}

<%= code_end %>

* Whats a statement? A line of java, e.g. for ..., return ... etc.
* Note use of \<name\>: where you put a name, etc.

#### What's a method?
* A method is just a named set of statements
* Instead of copying the lines you create a sub-routine
* What happens when a method is called?
  * Exection "jumps" into that method
  * Executes the statements of that method
  * "Jumps" back to the opoint where the message was called

#### What's a class?
* A named collection of methods and fields
* A "blueprint" or "cookiecutter" to createa a new Object
* More to come...

#### Good To Know
* A program’s class name and file name should match, so Class “Hello” should be stored in a file named “Hello.java”
* Java is case sensitive
* class “HELLO” is different from “Hello”
* Class name should begin with capital letter
* Method names should begin with lowercase e.g., main, mainOld, mainNew
* You cannot name classes (and variables, etc) with one of the reserved keywords public, private, main, void, abstract, .....

#### Data, expressions and variables

* At a simplistic level, programs manipulate data
* Read, write, change, print, sort, etc. etc
* Data is always known by its datatype (aka type)
  * 1 + "House" ?
  * true / 200 ?
* To make sense, we need to tell Java the datatypes of things
* Built-in or "primitive Data types"
  * `int`: integers, e.g. 12, 321, -300, 0
  * `double`: real numbers, e.g. 3.1, -0.25, 3.415, 1.0
  * `boolean`: true/false or logical values, e.g. true, false
  * `char`: a single character, e.g. 'A', '本', ':', '\n'

##### Numeric Expressions
* Like a calculator, simple mathematical expressions
* Combining numbers in valid ways
  * `1 + 2` equals 3
  * `10 * (3 + 5)` equals 80
  * `1.5 + 2.5` equals 4.0
  * And so on...

  ##### Logical or boolean expresions
  * Comparing values
    * `1 == 2` (equals false)
    * `0 == 0` (equals true)
    * `(1 == 2) || (2 == 2)` (equals false)
    * And so on...

  ##### String expressions
  * The word **string** in programming almost always means a text string or a string of chacters
  * Combining strings of text
    * `"My Name is" + "Pito" (equals "My name isPito")
    * `"1" + " " + "is equal to one"` (equals "1 is equal to 1"

  ##### Variables
  * A "box" that can contain something
    * Has a name ("myFavoriteShoeSize")
    * Has a datatype (int)
    * Has something stored in it (12)
  * Like a real box, you can't store a car in a shoebox!
  * The datatype says what kinds of stuff fits in that box
  * Variables have to be created ahead of time (declared)
  * At that time a datatype and name are supplied
  * <%= nb("You cannot use a variable before you put a value into it (initialize it)") %>

#### Example

<%= code_begin %>
public class Hello {
  public static void main(String[] args){
    int weeksPerYear;
    int daysPerWeek;
    weeksPerYear = 52;
    daysPerWeek = 7
    int daysPerYear;
    daysPeryear = weeksPerYear * daysPerWeek;
    System.out.println(daysPerYear);
  }
}
<%= code_end %>

<%= callout("Good to know", " You can declare and initialize a variable in one statement: int i = 0; ") %>

##### Assignment Statements
* One of the must common statements
* Stores a value in a variable `recordCount = 12;`
* The LHS (left hand side)
  * A variable name: `childName = "Pito";`
  * An array reference: `child[1] = "Pito";`
  * more to come
* The RHS (right hand side)
  * An expression of some kind
* <%= nb("Datatype of LHS must match datatype of RHS!") %>

##### Examples
<%= code_begin %>
int count;
bool valid;
int[] hand;

count = 1 * 100;
count = "one hundred";
valid = true;
valid = count == 100;
valid = count == "one hundred";
<%= code_end %>
