---
title: Parts of a program
desc: Review of basic building blocks of a program
---
#### Intro
* All languages have a particular way write a program
* **Very particular!**
* A really simple program fits within a single file
* Almost all real programs take more than one file
* Each file is a building block, a component
* YOU the programmer decides what the job is of each file

#### Kinds of errors you will write
* Types
  * Syntax errors - error message from the "compiler", before it even runs
  * Logic errors - the program doesn't do what you expect
  * Crashes or exceptions - the program doesn't get anywhere
* Work on recognizing what kind of error you have
* **Take a 1/2 second to read the error message!!!**

#### "Hello World!"
<%= code_begin %>
public class Hello {
  public static void main(String[] args){
    System.out.println(“Hello World.”);
  }
}
<%= code_end %>
#### Facts about java programs
* Yes, this is a valid Java program
* But to run it you have to put it into a text file
* File is called the same as the class, hello.java
* Java"source code"
  * Usually spaces don't matter
  * Usually extra lines don't matter
  * Everything is case sensitive. All these are different!
    * int myRecord;
    * int Myrecord;
    * int myrecord;
    * Int myrecord; **wrong!!**

#### Template for a Java program

<%= code_begin %>
public class <name> {
  public void method1(<arguments>) {
    <statement>;
    <statement>;
    ...
    <statement>;
  }
  public void method2(<args>) {
    <statement>;
    ...
  }
  ...
}

<%= code_end %>

* Whats a statement? A line of java, e.g. for ..., return ... etc.
* Note use of \<name\>: where you put a name, etc.

#### What's a method?
* A method is just a named set of statements
* Instead of copying the lines you create a sub-routine
* What happens when a method is called?
  * Exection "jumps" into that method
  * Executes the statements of that method
  * "Jumps" back to the opoint where the message was called

#### What's a class?
* A named collection of methods and fields
* A "blueprint" or "cookiecutter" to createa a new Object
* More to come...

#### Good To Know
* A program’s class name and file name should match, so Class “Hello” should be stored in a file named “Hello.java”
* Java is case sensitive
* class “HELLO” is different from “Hello”
* Class name should begin with capital letter
* Method names should begin with lowercase e.g., main, mainOld, mainNew
* You cannot name classes (and variables, etc) with one of the reserved keywords public, private, main, void, abstract, .....

#### Data, expressions and variables

* At a simplistic level, programs manipulate data
* Read, write, change, print, sort, etc. etc
* Data is always known by its datatype (aka type)
  * 1 + "House" ?
  * true / 200 ?
* To make sense, we need to tell Java the datatypes of things
* Built-in or "primitive Data types"
  * `int`: integers, e.g. 12, 321, -300, 0
  * `double`: real numbers, e.g. 3.1, -0.25, 3.415, 1.0
  * `boolean`: true/false or logical values, e.g. true, false
  * `char`: a single character, e.g. 'A', '本', ':', '\n'

##### Expressions
* Like a calculator, combine values to create new values
* Values are either
  * constants ("literals")
  * variables containing values
  * method invocations which return a value

##### Numeric Expressions
* Combining numbers in valid ways
  * `1 + 2` equals 3
  * `10 * (3 + 5)` equals 80
  * `1.5 + 2.5` equals 4.0
  * And so on...

  ##### Logical or boolean expresions
  * Comparing values
    * `1 == 2` (equals false)
    * `0 == 0` (equals true)
    * `(1 == 2) || (2 == 2)` (equals false)
    * And so on...

  ##### String expressions
  * The word **string** in programming almost always means a text string or a string of chacters
  * Combining strings of text
    * `"My Name is" + "Pito" (equals "My name isPito")
    * `"1" + " " + "is equal to one"` (equals "1 is equal to 1"

  ##### Variables
  * A "box" that can contain something
    * Has a name ("myFavoriteShoeSize")
    * Has a datatype (int)
    * Has something stored in it (12)
  * Like a real box, you can't store a car in a shoebox!
  * The datatype says what kinds of stuff fits in that box
  * Variables have to be created ahead of time (declared)
  * At that time a datatype and name are supplied
  * <%= nb("You cannot use a variable before you put a value into it (initialize it)") %>

#### Example

<%= code_begin %>
public class Hello {
  public static void main(String[] args){
    int weeksPerYear;
    int daysPerWeek;
    weeksPerYear = 52;
    daysPerWeek = 7
    int daysPerYear;
    daysPeryear = weeksPerYear * daysPerWeek;
    System.out.println(daysPerYear);
  }
}
<%= code_end %>

<%= callout("Good to know", " You can declare and initialize a variable in one statement: int i = 0; ") %>

##### Assignment Statements
* One of the must common statements
* Stores a value in a variable `recordCount = 12;`
* The LHS (left hand side)
  * A variable name: `childName = "Pito";`
  * An array reference: `child[1] = "Pito";`
  * more to come
* The RHS (right hand side)
  * An expression of some kind
* <%= nb("Datatype of LHS must match datatype of RHS!") %>

##### Examples
<%= code_begin %>
int count;
bool valid;
int[] hand;

count = 1 * 100;
count = "one hundred";
valid = true;
valid = count == 100;
valid = count == "one hundred";
<%= code_end %>

##### Errors you will commit many times
* Confusing `==` with `=`
  * They look alike but they are **totally** different
  * `=`: **assignment** copy value in RHS into variable in LHS
  * `==`: Binary operator, for "is equal", returns boolean
<%= code_begin %>
// Example
if (a = 1) {
  System.out.printl("You have just stored 1 into a")
}
if (a == 1000) {
  System.out.println*("You have just checked if a is equal to 1000")
}
<%= code_end %>
#### Looping
* When you want to do something multiple times in a row
* For example,
  * Print the number of people on every floor
  * Open every file in this directory
  * Send an email to every player
  * Find the squares of numbers between 1 and 10
* All programming languages have some way to loop
* In fact they have many ways to loop, depending on the details

##### For loops
* Can be kind of confusing!!

<%= code_begin %>
for (initialization; test; update) {
  statement;
  statement;
  ...etc
}
<%= code_end %>

1. Perform `initialization` once
2. Repeat the following:
   1. Check if the `test` is true.  If not, stop
   2. Execute the statements
   3. Perform the `update`

##### OMG, I can **nest** loops
* A loop inside a loop:
<%= code_begin %>
for (int i = 1; i <= 4; i++) {
  for (int j = 1; j <= 5; j++) {
    System.out.print((i * j) + "\t");
  }
  System.out.println();  // to end the line
}
<%= code_end %>
* Statements in the outer loop's body are executed 4 times
* The inner loop prints 5 numbers each time it is run
* Output:
<%= code_begin %>
  1    2    3    4    5
  2    4    6    8    10
  3    6    9    12   15
  4    8    12   16   20
<%= code_end %>

#### Variable **scope**
* A *key* concept that exists in almost all programming languages
* Scope: The part of a program where a variable exists
   * From its declaration to the end of the { } braces
   * A variable declared in a for loop exists only in that loop
   * A variable declared in a method exists only in that method
* Example:

<%= code_begin %>

public static void example() {
   int x = 3;
   for (int i = 1; i <= 10; i++) {
      System.out.println(x);
   }
// i no longer exists here
}
// x no longer exists here
<%= code_end %>

#### Parameter: A value passed to a method by its caller.
* Assume you want to print 2 lines with  7 and 13 stars each
   * You can write 2 methods lineOf7, lineOf13 that print 7 and 13 stars
   * OR, even better write a line method to draw any length of stars
* When declaring the method, we will state that it requires a parameter for the number of stars
* When calling the method, we will specify how many stars to draw

##### Passing Parameters

###### Declaration
<%= code_begin %>
public static void name (type name, ..., type name) {
    statement(s);
}
<%= code_end %>
###### Call
<%= code_begin %>
methodName (value, value, ..., value);
<%= code_end %>

###### Example:
<%= code_begin %>
public static void main(String[] args) {
    line(7);       // Prints 7 stars
    line(13);      // Prints 13 starts
}

public static void line(int stars) {
    for (int i=0; i<=stars; i++) {System.out.print(*);)
}
<%= code_end %>

#### Return
* Statement used only inside a method
* Determines what value the method **returns**
* Compare Paratmers and Return
   * Paramters: send information from the caller to the method
   * Return: (values) send information out of a method, back to the caller.

###### Example
<%= code_begin %>
// Returns the slope of the line between the given points.
public static double slope(int x1, int y1, int x2, int y2) {
    double dy = y2 - y1;
    double dx = x2 - x1;
    return dy / dx;
}
System.out.println(slope(1, 1, 10, 10));
<%= code_end %>
